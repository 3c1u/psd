var N=null,E="",T="t",U="u",searchIndex={};
var R=["Currently unsupported","result","error","psdchannelkind","psdchannelcompression","height","colormode","psdlayer","compression","try_from","borrow_mut","try_into","type_id","to_owned","clone_into","borrow","typeid","ordering","formatter","ColorMode","PsdChannelCompression","PsdChannelKind","PsdLayer"];
searchIndex["psd"]={"doc":"Data structures and methods for working with PSD files.","i":[[3,R[22],"psd","Information about a layer in a PSD file.",N,N],[3,"Psd",E,"Represents the contents of a PSD file",N,N],[4,R[19],E,"Adobe Docs",N,N],[13,"Bitmap",E,E,0,N],[13,"Grayscale",E,E,0,N],[13,"Indexed",E,E,0,N],[13,"Rgb",E,E,0,N],[13,"Cmyk",E,E,0,N],[13,"Multichannel",E,E,0,N],[13,"Duotone",E,E,0,N],[13,"Lab",E,E,0,N],[4,R[20],E,"How is this layer channel data compressed?",N,N],[13,"RawData",E,"Not compressed",1,N],[13,"RleCompressed",E,"Compressed using PackBits RLE compression",1,N],[13,"ZipWithoutPrediction",E,R[0],1,N],[13,"ZipWithPrediction",E,R[0],1,N],[4,R[21],E,"The different kinds of channels in a layer (red, green,…",N,N],[13,"Red",E,E,2,N],[13,"Green",E,E,2,N],[13,"Blue",E,E,2,N],[13,"TransparencyMask",E,E,2,N],[13,"UserSuppliedLayerMask",E,E,2,N],[13,"RealUserSuppliedLayerMask",E,E,2,N],[11,"new",E,"Create a new PsdLayerChannelCompression",1,[[["u16"]],[R[1],[R[4],R[2]]]]],[11,"new",E,"Create a new PsdLayerChannel",2,[[["i16"]],[R[1],[R[3],R[2]]]]],[11,"rgba_offset",E,"R -> 0 G -> 1 B -> 2 A -> 3",2,[[["self"]],[R[1],["usize",R[2]]]]],[11,"new",E,"Create a new ColorMode",0,[[["u8"]],[R[1],[R[6],R[2]]]]],[11,"new",E,"Create a new photoshop layer",3,[[["string"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],[R[7]]]],[11,"name",E,"Get the name of the layer",3,[[["self"]],["str"]]],[11,"width",E,"The width of the layer",3,[[["self"]],["u16"]]],[11,R[5],E,"The height of the layer",3,[[["self"]],["u16"]]],[11,R[8],E,"Get the compression level for one of this layer's channels",3,[[["self"],[R[3]]],[R[1],[R[4],R[2]]]]],[11,"rgba",E,"Create a vector that interleaves the red, green, blue and…",3,[[["self"]],[R[1],["vec",R[2]]]]],[11,"from_bytes",E,"Create a Psd from a byte slice.",4,N],[11,"width",E,"The width of the PSD file",4,[[["self"]],["u32"]]],[11,R[5],E,"The height of the PSD file",4,[[["self"]],["u32"]]],[11,"depth",E,"The number of bits per channel",4,[[["self"]],["u8"]]],[11,"color_mode",E,"The color mode of the file",4,[[["self"]],[R[6]]]],[11,"layers",E,"Get all of the layers in the PSD",4,[[["self"]],["vec"]]],[11,"layer_by_name",E,"Get a layer by name",4,[[["self"],["str"]],[R[1],[R[7],R[2]]]]],[11,"layer_by_idx",E,"Get a layer by index.",4,[[["self"],["usize"]],[R[1],[R[7],R[2]]]]],[11,"flatten_layers_rgba",E,"Given a filter, combine all layers in the PSD that pass…",4,[[["self"],["fn"]],[R[1],["vec",R[2]]]]],[11,"rgba",E,"Get the RGBA pixels for the PSD [ R,G,B,A, R,G,B,A,…",4,[[["self"]],["vec",["u8"]]]],[11,R[8],E,"Get the compression level for the flattened image data",4,[[["self"]],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[9],E,E,3,[[[U]],[R[1]]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[R[16]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[1]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[9],E,E,4,[[[U]],[R[1]]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[R[16]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[1]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[13],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,N],[11,R[9],E,E,0,[[[U]],[R[1]]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[R[16]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[1]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[9],E,E,1,[[[U]],[R[1]]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[R[16]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[1]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[13],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,N],[11,R[9],E,E,2,[[[U]],[R[1]]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[R[16]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[1]]]],[11,"eq",E,E,1,[[["self"],[R[4]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[3]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"cmp",E,E,2,[[["self"],[R[3]]],[R[17]]]],[11,"clone",E,E,2,[[["self"]],[R[3]]]],[11,"clone",E,E,0,[[["self"]],[R[6]]]],[11,"partial_cmp",E,E,2,[[["self"],[R[3]]],["option",[R[17]]]]],[11,"hash",E,E,2,N],[11,"fmt",E,E,1,[[["self"],[R[18]]],[R[1]]]],[11,"fmt",E,E,2,[[["self"],[R[18]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[18]]],[R[1]]]],[11,"fmt",E,E,3,[[["self"],[R[18]]],[R[1]]]],[11,"fmt",E,E,4,[[["self"],[R[18]]],[R[1]]]]],"p":[[4,R[19]],[4,R[20]],[4,R[21]],[3,R[22]],[3,"Psd"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);